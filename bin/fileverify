#!/bin/bash

print() {
    echo "$@" > /dev/tty
}

makeVerifyLine() {
    local fn=$1
    shift
    local hashes="$@"
    local size=$(du -bL "$fn" | cut -f1)
    local tstamp=$(date -r "$fn" -Iseconds)

    echo "v=1|$tstamp|$hashes|$size|"
}

getVerifyHash() {
    local hash=$1
    local verify=$2
    local hashes=$(echo "$2" | cut -d\| -f3)
    set -- $hashes
    local nr=$#

    while [ $nr -gt 0 ]; do
        local name=$(echo $1 | cut -d= -f1)
        if [ "$hash" = "$name" ]; then
            echo $1 | cut -d= -f2
            return 0
        fi
        shift
        ((--nr))
    done
    echo NONE
    return 1
}

setVerifyHash() {
    local hash=$1
    local value=$2
    local verify=$3

    local hashes
    local found=0

    set -- $(echo "$verify" | cut -d\| -f3)
    local nr=$#

    while [ $nr -gt 0 ]; do
        local name=$(echo $1 | cut -d= -f1)
        if [ "$hash" = "$name" ]; then
            hashes="$hashes ${hash}=$value"
            found=1
        else
            hashes="$hashes $1"
        fi
        ((--nr))
        shift
    done
    if [ $found -eq 0 ]; then
       hashes="$hashes ${hash}=$value"
    fi

    local tstamp=$(echo "$verify" | cut -d\| -f2)
    local fsize=$(echo "$verify" | cut -d\| -f4)
    echo "v=1|$tstamp|"${hashes}"|$fsize"
}


getPAR2ls() {
    [ -f "$1.par2" ] && {
        par2ls -v "$1.par2"
    }
}

getPAR2md5() {
    local fn=$1
    local bn=$(basename "$1")

    while read line; do
        if [ "$line" = "name=$bn" ]; then
            while read line; do
                if [ "${line:0:4}" = "md5=" ]; then
                    tr 'a-z' 'A-Z' <<<"${line:4}"
                    return
                fi
            done
        fi
    done < <(getPAR2ls "$fn" | grep -A5 "File Description packet")
}

makeHashes() {
    local fn=$1
    local size=$(du -bL "$fn" | cut -f1)
    local quick

    local hashes=$(jacksum -X -a crc32+md5+ed2k -F "CRC32=#CHECKSUM{0} MD5=#CHECKSUM{1} ed2k=#CHECKSUM{2}" "$fn")
    if [ "$size" -gt 16384 ]; then
        quick=$(dd if="$fn" bs=16k count=1 2> /dev/null | md5sum - | cut -c1-32 | tr '[a-z]' '[A-Z]')
        hashes="$hashes MD5_16k=$quick"
    fi
    echo $hashes
}

makeVerifyFile() {
    local fn="$1"
    local md5

    # if file exists with no verify counterpart
    if [ -f "$fn" -a ! -f "$fn.ver" ]; then
        # create the verify line itself
        verify=$(makeVerifyLine "$fn" $(makeHashes "$fn"))
        md5=$(getVerifyHash MD5 "$verify")

        # fetch the MD5 in its par2 file
        if [ -f "$fn.par2" ]; then
            local par2md5=$(getPAR2md5 "$fn") && {

            # sanity check catch any corruption
            if [ "$md5" != "$par2md5" ]; then
                print "WARNING: MD5/PAR2 mismatch: $fn ($md5, $par2md5)" > /dev/tty
                verify=$(setVerifyHash MD5 $par2md5 "$verify")
            fi
        }
        fi
        echo "$verify" > "$fn.ver"
        echo "$verify"
        return 0
    else
        cat "$fn.ver"
        return 1
    fi
}

# translate a-f to uppercase, then change all non hexidecimal
# chars to spaces and let the 'set' command assign the potential hex
# numbers to the function's positionals.  Then use the fancy ${!var}
# indirection to access the positionals in reverse (crc favors end
# of string).
getCRC() {
    local t=$1
    set -- $(echo "$t" | tr 'a-f' 'A-F' | tr -c 'A-F0-9' ' ')
    local ipos=$# crc value
    while [ $ipos -gt 0 ]; do
        value=${!ipos}
        [ ${#value} -eq 8 ] && {
            crc=$value
            break
        }
        ((--ipos))
    done
    echo $crc
}

makeRecoveryFile() {
    local b=$(rev <<<"$1" | cut -d. -f2- | rev)
    local GLOBIGNORE='*.ver:*.par2'
    par2create -q -q -b4000 -r1 -n1 "$1".par2 "$b"*
}

checkCRC() {
    local fn=$1
    local expect=$2
    local verify

    verify=$(makeVerifyFile "$fn")
    local crc=$(getVerifyHash CRC32 "$verify")

    echo "$crc"
    [ "$crc" = "$expect" ]
}

checkMD5s() {
    local fn=$1
    local verify=$(cat "$fn.ver")
    local par2md5=$(getPAR2md5 "$fn")
    local md5=$(getVerifyHash MD5 "$verify")

    if [ "$md5" != "$par2md5" ]; then
        echo "WARNING: MD5/par2 mismatch ($md5, $par2md5)" > /dev/tty
    fi
}

getFilesWithCRC() {
    local fn
    local crc

    for fn in "$@"; do
        [ ! -f "$fn" ] && continue
        crc=$(getCRC "$fn")
        if [ -n "$crc" -a "$crc" != "$fn" ]; then
            echo -en $crc"\t" | tr '[a-z]' '[A-Z]'
            echo "$fn"
        else
            print "No CRC, skipping $fn"
        fi
    done
}


getSFVMappings() {
    local sfv
    local l
    local crc
    local line
    local fn
    local ofn

    for sfv in *{SFV,sfv}; do
        [ -f "$sfv" ] && {
#            print "Loading $sfv"
            grep -v \; "$sfv" | sed 's///g' | while read line; do
                l=$(expr $(expr length "$line") - 7)
                crc=$(echo -n "$line" | cut -c${l}-$(expr $l + 7) | tr '[a-z]' '[A-Z]')
                fn=$(echo -n "$line" | cut -c1-$(expr $l - 2))
                ofn=$fn
                # is it not present?
                if [ ! -f "$fn" ]; then
                    # change spaces to underscore and try again
                    fn=$(echo "$fn" | sed 's/ /_/g')
                    if [ ! -f "$fn" ]; then
                        # change uppercase to lowercase and try again
                        fn=$(echo "$ofn" | tr '[a-z]' '[A-Z]')
                        if [ ! -f "$fn" ]; then
                            # combine the two previous checks and try again
                            fn=$(echo "$fn" | sed 's/ /_/g')
                            if [ ! -f "$fn" ]; then
                                # screw it! it isn't a typical mangling
                                continue
                            fi
                        fi
                    fi
                fi
                echo -en $crc"\t"
                echo "$fn"
            done
        }
    done
}

doUnknownStatus() {
    echo "fileverify: Unknown status type $1: filename=$2" > /dev/tty
}

makeDir() {
    local dir="$1"
    [ -d "$dir" ] || {
        mkdir -p "$dir" || {
            return 1
        }
    }
    return 0
}

stemMove() {
    local fn="$1"
    local dfn="$2"
    local sfn=$(rev <<<"$fn" | cut -d. -f2- | rev)
    local sdfn=$(rev <<<"$dfn" | cut -d. -f2- | rev)

    # defang the globbing on the filename's stem
    [ -f "$fn" ] || return 1;
    [ -n "$sfn" ] || return 1;
    [ "$sfn" = "$fn" ] && return 1;

    local f ext
    for f in "$sfn"*; do
        ext=${f:${#sfn}}
        mv "$f" "${sdfn}${ext}"
    done
}

doNewFile() {
    local fname="$1"
    local crc
    local fn
    local calc
    local delver=0

    while read crc fn; do
        [ ! -f "$fn" ] && continue

        # change _ to spaces, ` to ' and remove leading and trailing spaces
        local bfn=$(basename "$fn" | tr _ ' ' | tr \` \' | sed 's/^[ ]*\(.*[a-zA-Z0-9]\)[ ]*$/\1/')

        echo -en  "CHECKING > $bfn\r" > /dev/tty

        # does the ver file already exist?
        [ -f "$fn.ver" ] || delver=1

        calc=$(checkCRC "$fn" $crc) || {
            [ $delver -eq 1 ] && rm "$fn.ver"
            print " ${bold}MISMATCH${offbold}: ($crc:$calc)  $bfn"
            echo "MISMATCH|$fn|EXP=$crc CALC=$calc"
            continue
        }

        echo -en "    MATCH: $bfn\r" > /dev/tty

        makeDir "$stagingDir" || {
            echo "ERROR: unable to proceed with processing"
            continue
        }

        # now, move it into our staging directory
        stemMove "$fn" "$stagingDir/$bfn" || {
            print "ERROR: unable to move files to $stagingDir"
            continue
        }

        # now, create the par2 file
        print -ne " Gen PAR2: $bfn\r"
        (
            cd "${stagingDir}"
            makeRecoveryFile "$bfn" && {
                checkMD5s "$bfn"
            }
        )
        echo "    MATCH: $bfn" > /dev/tty
        echo "MATCH|$stagingDir/$bfn"
    done < <( (getFilesWithCRC "$fname"; getSFVMappings) | sort | uniq | sort -k2 )
}

main() {
    while IFS="|" read stat filename; do
        case "$stat" in
            NEW) doNewFile "$filename";;
            *) doUnknownStatus "$stat" "$filename";;
        esac
    done
}

bold=$(tput smso)
offbold=$(tput rmso)

print "Config"
print "  staging  = ${stagingDir:=$(pwd)/staging}"

if [ $# -gt 0 ]; then
    if tty -s < /dev/fd/1; then
        for arg in "$@"; do
            echo "NEW|$arg"
        done | main > /dev/null
    else
        for arg in "$@"; do
            echo "NEW|$arg"
        done | main
    fi
else
    main
fi
