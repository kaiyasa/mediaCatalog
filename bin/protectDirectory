#!/bin/bash

# prepare script name  and base path
declare -A prog=( [path]=$(dirname "$0") [name]=$(basename "$0") )
prog+=( [lib]="${prog[path]}/../lib" )

# load script library functions
for name in ${prog[lib]}/*; do
    if [ -f "$name" -a -x "$name" ]; then
        source "$name" || exit $?
    fi
done


parPath=parity

declare -a files=()

function  findFiles() {
    files=()

    local name
    while read name; do
        files+=( "$name" )
    done < <( find "$1" -type f )
}

function create() {
    mkdir "$parPath/$1" && (
        cd "$parPath/$1" && {
            clear
            echo "      Generating recovery data for $1"
            findFiles ../../"$1"
            par2create -q -R -r1 -s$((1 << 20)) -B ../../"$1" -a repairDB -- "${files[@]}"
        }
    )
}

function main() {
    [ $# -eq 0 ] && usage

    [ -d "$parPat"h ] || mkdir "$parPath"
    [ -d logs ] || mkdir logs

    local name
    for name in "$@"; do
        [ -d "$name" ] && create "$name" 2>&1 | tee logs/par$(basename "$name".log)
    done
}

# usage framework setup
usage+=( [detail]=detailedUsage [version]=1.0"" [description]="generate PAR2 recovery data for an entire  directory structure" )
 function detailedUsage() {
    cat <<EndOfFragment
  ${prog[name]} [directoryPath ...]
EndOfFragment
    exit 0
}

   main "$@"
