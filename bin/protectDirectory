#!/bin/bash

# prepare script name  and base path
declare -A prog=( [path]=$(dirname "$0") [name]=$(basename "$0") )
prog+=( [lib]="${prog[path]}/../lib" )

# load script library functions
for name in ${prog[lib]}/*; do
    if [ -f "$name" -a -x "$name" ]; then
        source "$name" || exit $?
    fi
done


parPath=parity

declare -a files=()

function  findFiles() {
    files=()

    local name
    while read name; do
        files+=( "$name" )
    done < <( find "$1" -type f )
}

function create() {
    local parDB="$parPath/$1"
    local workDir="$parPath/$1-$$"

    if [ "$redo" = "false" -a -d "$parDB" ]; then
        echo "Skipping $1, already protected"
        return 0
    fi

    if mkdir "$workDir" && pushd "$workDir" > /dev/null 2>&1 ; then
        generate "$name"
        popd > /dev/null 2>&1
    fi

    if $redo ; then
        [ -d "$parDB" ] && mv "$parDB" "$parDB".old
        mv "$workDir" "$parDB"
        rm -rf "$parDB".old
    else
        mv "$workDir" "$parDB"
    fi
}

function  generate() {
    clear
    echo "      Generating recovery data for $1"
    findFiles ../../"$1"
    par2create -q -R -r1 -s$((1 << 20)) -B ../../"$name" -a repairDB -- "${files[@]}"
}

function main() {
    [ $# -eq 0 ] && usage

    # process arguments
    local redo=false
    while [ $# -gt 0 ]; do
        case "$1" in
            '--redo') redo=true;;
            '--') shift; break;;
            *) break;;
        esac
        shift
    done

    run "$@"
}

function run() {
    [ -d "$parPath" ] || mkdir "$parPath"
    [ -d logs ] || mkdir logs

    local name
    for name in "$@"; do
        local logFile=logs/par$(basename "$name".log)

        [ -d "$name" ] && create "$(basename "$name")" 2>&1 | tee "$logFile"
    done
}

# usage framework setup
usage+=( [detail]=detailedUsage [version]=1.0"" [description]="generate PAR2 recovery data for an entire  directory structure" )
 function detailedUsage() {
    cat <<EndOfFragment
  ${prog[name]} [--redo] [directoryPath ...]
EndOfFragment
    exit 0
}

main "$@"
