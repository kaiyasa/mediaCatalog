#!/bin/bash

# load bootstrap code
source $(dirname "$0")/runFunction


# array to hold hash to file name mappings
declare -A hashes=()
declare -a names=()

function main() {
    local renameTree=false

    # process options
    while [ $# -gt 0 ]; do
        case "$1" in
        '-h' | '--help' | '-?') usage;;
        '-r') renameTree=true;;
        '--') shift; break;;
        *) break;;
        esac
        shift
    done


    local miss=0 hit=0 total=0
    local dir="${1:-.}"

    if [ -n "$dir" -a ! -d "$dir" ]; then
        echo "Error: expecting a directory as an argument -- $dir"
        exit 1
    fi

    if $renameTree ;then
        renameEntireTree "$dir"
    else
        renameByHash "$dir"
    fi

    # output statistics if notable
    if [ $total -gt 0 ]; then
        echo -e "\n$hit hits, $miss misses out of $total files"
    fi

    # set return code to signal if any modifications occurred
    test "$hit" -eq 0

}

function renameEntireTree() {
    local  rootDir="$1"

    while read dir; do
        if [ -f "$dir"/.summary -o -f "$dir"/.vcatalog ]; then
            renameByHash "$dir"
        fi
    done < <( find "$rootDir" -type d )
}

function renameByHash() {
    local dir="$1"

    loadHashes "$dir"

    local -a unmatchedNames
    loadArray < <(findUnmatchedFiles < <(generateFileLists "$dir"/.summary "$dir"))

    local name newName
    for name in "${unmatchedNames[@]}"; do
#echo "Working on $name"
        test ! -f "$dir/$name" && continue

        ((++total))
        read hash junk < <(md5sum "$dir/$name" | UC)

    newName="${hashes[$hash]}"
        if [ -n "$newName" -a "$name" != "$newName" ]; then
            ((++hit))
            echo "moved $hit files"
            mv -i "$dir/$name" "$dir/$newName"
        else
            echo "MISSED: $name"
            ((++miss))
        fi
    done    
}

function loadHashes() {
    local dir="${1:-.}"

    loadVCHashes "$dir/.vcatalog" && return 0
    loadMD5Hashes "$dir/.summary" && return 0

    echo "No catalog is present -- $dir"
    exit 90
}

function loadArray() {
    while read line; do
     unmatchedNames+=("$line")
    done
}

function generateFileLists() {
    local name hashFile="$1" dir="$2"

    cat <(printCatalogFiles) \
        <(find "$dir" -maxdepth 1 -type f -exec basename '{}' \;) \
        <(echo .summary; echo .summary; echo .vcatalog; echo .vcatalog) | \
      while read name; do
        [ -f "$dir/$name" ] && echo "$name"
      done
}

function printCatalogFiles() {
    local name

    for name in "${hashes[@]}"; do
        echo "$name"
    done
}

function findUnmatchedFiles() {
    sort | uniq -u
}

function loadVCHashes() {
    local vcPath="${1:-.vcatalog}"

    [ -f "$vcPath" ] || return 1

    while read record; do
        vcLineToArray "$record"
        hashes+=( [$(UC ${vc[MD5]} )]="${vc[name]}" )
        names+=( "${vc[name]}" )
    done < "$vcPath"
}


# usage hook for detailed descriptions
usage+=( [version]="1.0" [description]="fix mangled filenames using catalog information" )
function renameByHashUsage(){
    cat <<EndOfFragment
  ${prog[name]} [directory]
EndOfFragment
    exit 0
}

main "$@"