#!/bin/bash

# load bootstrap code
source $(dirname "$0")/runFunction


# array to hold hash to file name mappings
declare -A hashes=()
declare -a names=()

function main() {
    # validate our arguments or process help
    case "$1" in
      '-h' | '--help' | '-?') usage;;
      '--') shift;;
    esac

    local dir="${1:-.}"
    if [ -n "$dir" -a ! -d "$dir" ]; then
        echo "Error: expecting a directory as an argument -- $dir"
        exit 1
    fi


    loadMD5Hashes  "$dir/.summary" || {
        echo "'No catalog files present"
        exit 1
    }

    local -a unmatchedNames
    loadArray < <(findUnmatchedFiles < <(generateFileLists "$dir"/.summary "$dir"))

    local name newName
    local miss=0 hit=0 total=0
    for name in "${unmatchedNames[@]}"; do
#echo "Working on $name"
        test ! -f "$dir/$name" && continue

        ((++total))
        read hash junk < <(md5sum "$dir/$name")

    newName="${hashes[$hash]}"
        if [ -n "$newName" -a "$name" != "$newName" ]; then
            ((++hit))
            echo "moved $hit files"
            mv -i "$dir/$name" "$dir/$newName"
        else
            echo "MISSED: $name"
            ((++miss))
        fi
    done    

    echo 
    echo "$hit hits, $miss misses out of $total files"
    test "$hit" -eq 0
}

function loadArray() {
    while read line; do
     unmatchedNames+=("$line")
    done
}

function generateFileLists() {
    local name hashFile="$1" dir="$2"

    cat <(cut -c35- "$hashFile" | uniq) \
        <(find "$dir" -maxdepth 1 -type f -exec basename '{}' \;) \
        <(echo .summary; echo .summary; echo .vcatalog; echo .vcatalog) | \
      while read name; do
        [ -f "$dir/$name" ] && echo "$name"
      done
}

function findUnmatchedFiles() {
    sort | uniq -u
}


# usage hook for detailed descriptions
usage+=( [version]="1.0" [description]="fix mangled filenames using catalog information" )
function renameByHashUsage(){
    cat <<EndOfFragment
  ${prog[name]} [directory]
EndOfFragment
    exit 0
}

main "$@"